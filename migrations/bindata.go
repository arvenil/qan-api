// Code generated by go-bindata.
// sources:
// migrations/clickhouse/1_add_mysql.down.sql
// migrations/clickhouse/1_add_mysql.up.sql
// migrations/clickhouse/2_add_mongo.down.sql
// migrations/clickhouse/2_add_mongo.up.sql
// migrations/sqlite/1_init.down.sql
// migrations/sqlite/1_init.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationsClickhouse1_add_mysqlDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xc8\xad\x2c\x2e\xcc\x89\x2f\x2c\x4d\x2d\xaa\x8c\x4f\xce\x49\x2c\x2e\x8e\xcf\x4d\x2d\x29\xca\x4c\x2e\x4e\xb0\xe6\x02\x04\x00\x00\xff\xff\x20\x4d\xcc\x6f\x32\x00\x00\x00")

func migrationsClickhouse1_add_mysqlDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsClickhouse1_add_mysqlDownSql,
		"migrations/clickhouse/1_add_mysql.down.sql",
	)
}

func migrationsClickhouse1_add_mysqlDownSql() (*asset, error) {
	bytes, err := migrationsClickhouse1_add_mysqlDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/clickhouse/1_add_mysql.down.sql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1519912182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsClickhouse1_add_mysqlUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x98\xd1\x6f\xdb\xb6\x16\xc6\xdf\xfb\x57\x1c\xe4\xe1\x3a\x09\x94\xa4\x4d\xd6\xa1\xc9\x45\x60\xb8\xb5\xb2\x7a\x70\xed\xce\x76\xd1\x01\xc3\xa0\xd1\xd2\x91\xcc\x55\x22\x55\x92\xaa\xed\xbb\xed\x7f\xbf\x20\x29\xd9\x92\x25\x2a\x05\x96\x87\xd8\xd6\xef\x33\xf5\x7d\x3c\xa4\x64\x9d\x77\x0b\x7f\xb4\xf2\x61\x35\x7a\x3b\xf5\x61\xf2\x04\xb3\xf9\x0a\xfc\x5f\x27\xcb\xd5\x12\xfe\xc8\xf6\xf2\x6b\x1a\x7c\x2d\x50\xec\x83\x30\x25\x52\x06\x19\x2a\x41\x43\xf9\x07\x9c\xbf\x00\x00\xf0\xbf\x21\x53\x63\xa2\x10\xf4\x3f\xef\x85\x39\x78\x75\x05\x11\xcd\x90\x29\xca\x99\x34\x47\x22\x9a\xa0\x54\xb0\x54\x82\xb2\xc4\x33\x8a\x47\xa8\x0f\x4b\xa3\x9a\x2e\x50\xb8\x3b\x8a\x8d\x36\xa6\x2c\x41\x91\x0b\xca\x54\x75\x0a\xfb\xf5\x6f\x28\xd6\xe0\xb3\x22\x7b\x73\x3e\x98\xaf\xde\xfb\x8b\xc1\xe3\x4b\x0f\x06\x4b\x7f\xea\xbf\x5b\x0d\x1e\x5f\x79\x30\x98\xcc\x96\xfe\x62\x35\x78\xbc\xf5\x60\xf0\xe9\xe3\x78\xb4\xf2\x07\x8f\x77\x1e\x0c\xc6\xfe\xd4\xd7\xef\x7f\xf0\x60\xb0\xf0\x3f\x4e\x47\xef\xfc\xc1\xe3\xeb\x0b\x18\xfb\x4f\xa3\x4f\xd3\x15\xbc\xf4\xe0\xe6\x12\xb6\x34\x4d\x61\x8d\x40\x19\xa4\x64\x8d\xa9\x84\xcb\x1b\xeb\x55\xb2\x40\xa2\xf8\x86\xe2\x60\xf5\xe6\x12\x52\x1e\x92\x74\xc3\xa5\x7a\xb8\xbb\x7b\xf9\x23\xfc\x0d\x92\x87\x5f\x50\x5d\xc3\x98\xc3\x16\x11\x18\x62\x04\x8a\x03\xcf\xa8\x82\x08\xd3\xb8\x48\x15\xe4\x5c\xa8\x21\xac\xe6\xe3\xf9\x03\xbc\xe7\x5b\xc8\x8a\x70\x03\x5b\x84\x94\x4b\x75\xb3\xa5\x0c\xb6\x54\x6d\x40\xe6\x29\x55\xa0\xc7\x06\xc2\x22\xc8\xf5\x1b\xca\x40\x62\x4e\x84\xae\x40\x4c\x31\x8d\xe4\xb0\xe1\x2f\xdc\x60\x46\xea\x53\xf9\x79\x43\x94\x3e\x7f\xc4\x81\xc6\x76\x0e\x41\x62\x8a\xa1\x92\x10\x0b\x9e\xc1\x2d\x70\x01\x19\x17\x08\xd1\x5a\x5e\x1f\x46\x2a\x24\x0a\x46\x32\xac\xc6\xb2\x95\x0e\x53\x8a\x4c\x05\xc6\x53\x05\xf4\xf1\x72\xa6\x46\x42\x90\xfd\xb9\x05\x17\xe6\xf4\xbf\x19\xf2\xca\xb3\x8a\x80\x32\x89\x42\x55\x9f\xa2\xf5\xed\xef\x76\x5c\x92\xe8\x61\x8b\x82\x46\x75\xef\x34\x02\x1e\x5b\x06\x4a\xe7\x90\xfa\x5d\x44\x14\x31\x5f\xca\x51\x50\x1e\x05\x52\x11\xa1\xcc\x72\x5c\xd1\x0c\xbd\x3a\x4a\x91\x25\x6a\x03\x9f\x26\x4c\xbd\xb1\x80\x15\x99\x59\xde\x14\xa5\x39\xfc\xe3\x0f\xc7\x35\x6c\xeb\x11\xe9\xba\xd9\xb2\x71\x96\xee\x81\x33\x2c\xa7\x0d\x77\x24\xcb\x53\xb4\xc5\xc1\x9d\x22\x50\x6e\x0e\x33\x83\x84\xed\x87\xc0\xd5\x06\xc5\x96\x4a\x3c\x8c\xa1\x38\xe4\x29\x09\x11\xd4\x86\x4a\x20\x12\x18\x4a\x85\x91\x49\x01\x52\x89\x22\x54\x85\x40\x3b\xef\xd5\x09\xea\x33\x5b\x1e\x0b\x62\x2e\x32\xa2\xaa\x95\xef\xff\x3a\xfa\xf0\x71\xea\xdb\xb5\x3f\x9e\xfc\xe4\x2f\xf5\xda\xbf\xb0\x5f\xa1\x32\x50\xa2\x60\x21\xd1\xe7\xb1\xd9\x75\x3c\xdc\xa1\x19\x49\xd2\xff\x21\x0c\x87\x8d\xd1\xd5\x3e\x47\xa8\x06\x5f\x8c\x66\xe3\xf9\x87\x72\x5f\x4d\xe7\x9f\xed\xe0\x1e\x0c\x9e\x46\xcb\x95\xf9\xa0\x77\xd6\xe7\xc9\xea\x7d\xe0\x2f\x16\xf3\xc5\xe0\xf1\xee\xa2\x69\x36\x42\x45\x68\x2a\xeb\xb5\xfc\x79\x39\x9f\xd9\x99\xcb\x50\x28\x1a\x4a\x0f\x50\x08\x2e\x3c\xd8\x12\xc1\x28\x4b\xa4\x07\x84\xed\xed\x0c\x02\xe3\x0c\x48\x92\x08\x4c\x88\x22\xeb\x14\x41\xaa\x22\x8e\xcd\x39\x5c\x7f\x57\x57\xf0\xd7\x59\x16\xfc\x62\xae\x12\x8a\x66\x78\xf6\x00\x77\xd7\xaf\x3d\x38\xcb\x82\x29\x0f\xbf\x54\xc7\x5e\x5f\xdf\xc3\x3f\xb6\xe6\x7c\xfd\xa7\xd9\x07\xa7\x36\x71\x77\xfd\x00\x7f\x9d\x99\x33\xcb\xb3\x07\xf8\xed\x4c\xad\xd3\x57\x67\x1e\xe8\xd7\xdb\xb3\xdf\xff\x29\x97\xca\x56\xaf\x49\x4c\x25\x0e\x01\x59\x42\x19\x0e\x41\xa6\x7c\x9b\xf2\xe4\xef\x5c\x0e\x87\x10\xd3\x54\xa1\x80\xf5\x1e\x48\xa1\x78\x28\xd0\x54\xc4\xee\x95\xe1\x61\xd9\x95\x8b\xc8\x7c\xac\xfb\x0f\x42\xa6\xe0\x29\xe5\x44\xdd\xdd\x7a\x6d\x2a\x8b\xac\x87\x66\x94\xf5\x51\xb2\xeb\xa1\xf9\xfd\x7d\x0f\xdd\x24\xe5\x36\x2f\x25\x76\x9f\xdb\x09\xd9\xf0\xad\x5e\xf0\x55\xe5\x10\x36\x54\x2a\x9e\x08\x92\x49\x73\x09\xd3\x3c\x26\xfa\x32\x26\xcb\xfd\x50\x2a\x29\x67\xe5\x84\xd4\x8a\xd5\x35\x01\x47\xd8\x91\xff\x08\x3b\xe2\xd7\x60\x3b\xfd\x11\x76\x84\x3f\xc2\x76\xf6\xca\xf4\x82\x6f\x65\xa0\x2f\x4f\xc6\x74\x75\x65\x39\x65\xda\xb3\x8b\x69\xcb\x4e\x46\x76\x4e\xa6\x0d\xbb\xd8\xc1\xaf\x15\x9c\xd8\xd5\xbb\x95\x32\x8c\x5c\x96\x0f\xdc\x61\xfb\xc0\x1d\xd6\x8f\xbc\xdb\xfe\x81\x3b\x22\x1c\x78\x7f\x0c\x12\xc7\x18\x2a\x77\x8c\x03\x77\xc4\x38\x70\x47\x8c\x23\xef\x8e\x71\xe0\x8e\x18\x07\xde\x1f\x43\x20\x71\x46\x30\xcc\x61\xdf\x30\x87\x75\xcb\xba\x6d\x1b\xe6\xb0\x6c\x98\xd3\xee\x07\x14\x09\x06\x39\x91\x12\x65\x87\xe3\x06\x6e\x9b\x6e\xe0\xb6\xef\x26\x6e\x59\x6f\xe0\xb6\xfb\x06\x76\x06\x98\x30\xc6\xc7\x6f\x83\xc9\x3c\x10\x01\xcf\xbb\x32\x9c\x2a\xda\x31\x4e\x15\xed\x24\x2d\x45\x2b\xcc\xa9\xa2\x9d\xe7\x54\xf1\x5d\x91\xd6\x7b\xd5\x59\x98\xb6\xa6\x3f\x96\xd5\xf4\x07\x2b\x35\xbd\xd1\xac\xa6\x3f\x9c\xd5\x7c\x57\xbc\x2d\xa1\xaa\xeb\xd6\xd0\xd2\x74\xdc\x21\x5a\x9a\x8e\x1b\x45\x5b\xd3\xbe\x5f\xb4\x34\x1d\xb7\x8d\x96\xc6\x7d\xf7\x28\xa5\x02\xc3\x20\xd5\x37\x9b\x67\x22\x36\x75\xee\x98\x4d\x9d\x3b\xea\x89\xce\x19\xb7\xa9\x73\x47\x6e\xea\x9e\x8d\xfd\xb5\xc0\x02\x9f\xcb\x5c\x13\xb9\x03\xd7\x44\xee\xb4\x75\x91\x33\x6a\x4d\xe4\xce\x59\x13\x3d\x1b\x32\x27\x09\xca\x20\xa2\x52\x51\x16\x76\xfd\x4a\xe8\xd6\x39\x77\xe8\x89\xce\xb9\x4b\x4f\x75\xae\x9d\x7a\xa2\x73\xee\xd6\x13\x9d\x73\xc7\xda\x5f\x8c\xf6\x01\xac\x23\x6d\x03\xb7\x43\x36\x70\x3b\x5b\x13\xb7\x22\x35\x70\x3b\x49\x03\x3b\x03\xbc\xb5\x57\xc8\xee\x9f\x74\x35\xd8\x36\x5f\x83\x6d\xeb\x75\xd8\x32\x5e\x83\x6d\xdb\x35\xe8\x34\xbd\xca\xf2\xc0\x3e\xb6\x74\x98\xae\xc1\xb6\xe9\x1a\x6c\x9b\xae\xc3\x96\xe9\x1a\x6c\x9b\xae\xc1\x5e\xd3\x11\x95\x5f\xfa\x9d\xd7\x15\xdd\xf6\xeb\x8a\xee\x0c\x0d\x45\x67\x90\xba\xa2\x3b\x4d\x5d\xf1\x7c\x1d\xcc\xd3\x76\x6f\x31\x4a\x45\x4f\x45\x4a\x45\x4f\x59\x2a\x85\xbb\x36\xa5\xa2\xa7\x40\xa5\xc2\x11\xa9\xab\x3d\x72\xa9\x63\x79\x70\xa9\x9d\x99\x17\xb2\xd3\x2f\xf9\xfd\xbd\x7e\xd9\x24\x70\x05\x31\x17\xc0\x70\xa7\xaa\x87\xdc\x61\xb5\x05\xdf\x05\xef\x69\xd7\xde\x79\x2a\xd2\x34\x90\x21\x61\x2e\xf6\x27\xa7\x5d\xac\x16\xa3\x87\x71\x66\xcb\xd7\x31\x36\x4d\x51\x72\xd1\x69\xa9\x42\xee\x6f\x2f\x4d\x43\x2d\x88\xb5\x41\x41\x58\x82\x2e\x9b\xa5\xd0\x6a\x9e\xc1\xe1\x06\xc3\xce\x93\x69\x2f\xce\x11\x0c\x34\x0f\x80\xdd\xcc\x31\xb7\x33\x1e\x50\x16\xe1\x2e\x28\x64\xe7\x93\xd2\x8c\x07\x09\xe7\x91\x4b\x54\xad\x11\x5f\x08\x2e\x24\xfc\x07\x3e\x97\x4d\x1d\x03\xaa\xa6\xdb\x3e\xd8\x52\xb5\x09\xaa\x86\x4f\xe3\x14\x37\x97\x20\x69\x96\xa7\x7b\x20\x7a\xf9\x01\x8f\x41\x9a\xb6\x8c\xe9\xae\xfd\xbc\x9c\xcf\x3c\xa0\xb1\x5e\x7b\x11\x07\xc6\xd5\xa1\xbb\x76\x6c\x36\x98\x8e\xc2\x49\x53\xb4\xf2\x01\x33\xd3\x76\x33\xc7\x6c\x27\x5b\xff\x85\x3c\x6a\x76\xdb\xec\xc1\xe2\xb0\x5b\xcd\xc1\x0b\xaf\x2b\x05\xda\xa8\x27\x19\x96\x24\x43\xf8\x05\x88\x04\xca\xaa\x93\x57\x5e\xca\xc9\xf9\x37\x4e\x2c\xba\xb9\x3c\xb6\x9e\x60\x83\x02\x4d\xdc\x0b\xf0\x67\x3f\x4d\x66\x3e\x3c\x82\x79\x0c\x5a\x09\xc4\xf3\x43\xbf\xde\x83\x73\xdb\x6c\xf7\x6a\x8d\x6c\xaf\xd1\xea\xf5\x6a\x2d\x64\xaf\xde\xea\xf5\x1a\xad\xd6\x0b\x0f\xde\xbc\xba\xbf\xbd\xf8\xef\x8b\xff\x07\x00\x00\xff\xff\xd1\x98\xc3\x9a\x4a\x18\x00\x00")

func migrationsClickhouse1_add_mysqlUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsClickhouse1_add_mysqlUpSql,
		"migrations/clickhouse/1_add_mysql.up.sql",
	)
}

func migrationsClickhouse1_add_mysqlUpSql() (*asset, error) {
	bytes, err := migrationsClickhouse1_add_mysqlUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/clickhouse/1_add_mysql.up.sql", size: 6218, mode: os.FileMode(420), modTime: time.Unix(1519918648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsClickhouse2_add_mongoDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xc8\xcd\xcf\x4b\xcf\x8f\x2f\x2c\x4d\x2d\xaa\x8c\x4f\xce\x49\x2c\x2e\x8e\xcf\x4d\x2d\x29\xca\x4c\x2e\x4e\xb0\xe6\x02\x04\x00\x00\xff\xff\xdf\x1f\xc1\xd4\x32\x00\x00\x00")

func migrationsClickhouse2_add_mongoDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsClickhouse2_add_mongoDownSql,
		"migrations/clickhouse/2_add_mongo.down.sql",
	)
}

func migrationsClickhouse2_add_mongoDownSql() (*asset, error) {
	bytes, err := migrationsClickhouse2_add_mongoDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/clickhouse/2_add_mongo.down.sql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1519912185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsClickhouse2_add_mongoUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x73\xda\xba\x12\x7f\xef\xa7\xd8\xe1\xe1\x12\x32\x4a\xd2\x24\x6d\xa7\xc9\x1d\x86\xe1\x16\xa7\xe5\x0e\x85\x16\xdc\x49\x67\x3a\x1d\x57\xd8\x8b\xd1\x39\xb2\xe4\x23\xad\x0b\x9c\xb6\xdf\xfd\x8c\x24\x9b\x02\x49\x78\x39\x79\x08\xb6\x7e\xeb\xdd\xfd\xed\x5f\xbd\x99\x46\xfd\x38\x82\xb8\xff\xbf\x51\x04\xc3\x3b\x18\x4f\x62\x88\x3e\x0f\x67\xf1\x0c\xbe\x15\x5a\xe5\x3a\xf9\xab\x42\xb3\x49\x52\xc9\xad\x4d\x0a\x24\x23\x52\xfb\x0d\x4e\x9e\x01\x00\x44\xdf\x51\xd1\x80\x13\x82\xfb\xc7\x9e\xf9\xc3\xb3\x33\xc8\x44\x81\x8a\x84\x56\xd6\x9f\x64\x22\x47\x4b\x30\x23\x23\x54\xce\xbc\x44\x17\x76\xd5\x8a\x6c\x47\x2e\x21\x5c\xff\x16\xf6\xb2\x0b\xa1\x72\x34\xa5\x11\x8a\x1a\x13\xe1\xf3\xef\x68\xe6\x10\xa9\xaa\x78\x7d\xd2\x9e\xc4\xef\xa2\x69\xbb\xfb\x9c\x41\x7b\x16\x8d\xa2\x37\x71\xbb\x7b\xc9\xa0\x3d\x1c\xcf\xa2\x69\xdc\xee\x5e\x31\x68\x7f\xfa\x30\xe8\xc7\x51\xbb\x7b\xcd\xa0\x3d\x88\x46\x91\x7b\x7e\xc1\xa0\x3d\x8d\x3e\x8c\xfa\x6f\xa2\x76\xf7\x65\x07\x06\xd1\x5d\xff\xd3\x28\x86\xe7\x0c\x2e\x4e\x61\x25\xa4\x84\x39\x82\x50\x20\xf9\x1c\xa5\x85\xd3\x8b\xe0\xab\x55\x89\x45\xf3\x1d\xcd\xd6\xd5\x8b\x53\x90\x3a\xe5\x72\xa9\x2d\xdd\x5e\x5f\x3f\x7f\x05\x3f\xc1\xea\xf4\x4f\xa4\x73\x18\x68\x58\x21\x82\x42\xcc\x80\x34\xe8\x42\x10\x64\x28\x17\x95\x24\x28\xb5\xa1\x1e\xc4\x93\xc1\xe4\x16\xde\xe9\x15\x14\x55\xba\x84\x15\x82\xd4\x96\x2e\x56\x42\xc1\x4a\xd0\x12\x6c\x29\x05\x81\xd3\x0d\x5c\x65\x50\xba\x07\xa1\xc0\x62\xc9\x8d\xcb\xc0\x42\xa0\xcc\x6c\x6f\xcf\xbf\x74\x89\x05\xdf\x0d\xe5\xfd\x92\x93\xb3\x9f\x69\x10\x8b\x10\x43\xb0\x28\x31\x25\x0b\x0b\xa3\x0b\xb8\x02\x6d\xa0\xd0\x06\x21\x9b\xdb\xf3\xad\xa6\xca\xa2\x51\xbc\xc0\x46\x57\xc8\x74\x2a\x05\x2a\x4a\xbc\x4f\x0d\xe0\xce\xeb\x48\xf5\x8d\xe1\x9b\x93\x00\x74\xbc\xf9\x2f\x1e\xb9\x64\x41\x22\x11\xca\xa2\xa1\xe6\x2d\x9b\x5f\x7d\x0d\x7a\x79\xee\xd4\x56\x95\xc8\x76\x7d\x17\x19\xe8\x45\xc0\x80\x1c\x0f\xeb\x9e\x32\x4e\xdc\x7f\x54\xa2\x11\x3a\x4b\x2c\x71\x43\xbe\x1c\x63\x51\x20\xdb\x85\x24\xaa\x9c\x96\xf0\x69\xa8\xe8\x75\x00\x54\x55\xf8\xf2\x16\x68\xfd\xf1\xab\x17\xbf\x6b\x38\xe4\x23\x73\x79\x0b\x69\xd3\x4a\x6e\x40\x2b\xac\xc3\x86\x6b\x5e\x94\x12\x43\x72\x70\x4d\x1c\xea\xe6\xf0\x11\xe4\x6a\xd3\x03\x4d\x4b\x34\x2b\x61\x71\xab\x83\x34\x94\x92\xa7\x08\xb4\x14\x16\xb8\x05\x85\x96\x30\xf3\x2c\xc0\x92\xa9\x52\xaa\x0c\x86\xb8\x37\x06\x76\x23\x5b\x9f\x25\x0b\x6d\x0a\x4e\x4d\xe5\x47\x9f\xfb\xef\x3f\x8c\xa2\x50\xfb\x83\xe1\xdb\x68\xe6\x6a\xbf\x13\x3e\x11\x36\x21\x53\xa9\x94\x3b\x3b\x81\xbb\xa3\x87\x6b\xf4\x9a\xac\xf8\x1b\xa1\xd7\xdb\xd3\x4e\x9b\x12\xa1\x51\x3e\xed\x8f\x07\x93\xf7\x75\x5f\x8d\x26\xf7\x41\x39\x83\xf6\x5d\x7f\x16\xfb\x17\xd7\x59\xf7\xc3\xf8\x5d\x12\x4d\xa7\x93\x69\xbb\x7b\xdd\xd9\x77\x36\x43\xe2\x42\xda\xdd\x5c\xfe\x7f\x36\x19\x87\xc8\x15\x68\x48\xa4\x96\x01\x1a\xa3\x0d\x83\x15\x37\x4a\xa8\xdc\x32\xe0\x6a\x13\x22\x08\x4a\x2b\xe0\x79\x6e\x30\xe7\xc4\xe7\x12\xc1\x52\xb5\x58\x78\x1b\x4f\xfd\x9d\x9d\xc1\x8f\x56\x91\x7c\xf4\x53\x82\x44\x81\xad\x5b\xb8\x3e\x7f\xc9\xa0\x55\x24\x03\x9d\xda\xc4\x20\x55\x46\x61\xd6\xba\x85\x97\xe7\x37\xf0\x2b\xe4\x5d\xcf\xff\xf0\xbd\x70\xe8\x2a\xae\xcf\x6f\xe1\x47\xcb\x5b\xb7\xad\x5b\xf8\xd2\xa2\xb9\xbc\x6c\x31\x70\xbf\x57\xad\xaf\xbf\xea\x72\x59\xb9\xba\x44\x69\xb1\x07\xa8\x72\xa1\xb0\x07\x56\xea\x95\xd4\xf9\xcf\xd2\xf6\x7a\xb0\x10\x92\xd0\xc0\x7c\x03\xbc\x22\x9d\x1a\xf4\x59\x09\xfd\xd2\xdb\x96\x5e\x5d\x48\xfe\x75\x97\x43\x92\x2a\x82\x3b\xa9\x39\x5d\x5f\xb1\x87\xa8\xad\x8a\x23\x68\x21\xd4\x31\x94\xaf\x8f\xa0\xe5\xcd\xcd\x11\x74\x99\xd7\xad\x5e\x8b\x84\x5e\x0f\x01\x59\xea\x95\x2b\xfa\x26\x7b\x08\x4b\x61\x49\xe7\x86\x17\xd6\x8f\x31\x87\x2f\xb8\x1b\x65\xb6\xee\x89\x5a\x52\x68\x55\x07\xe4\x20\x61\x3e\x08\x4d\xb3\x3e\x86\xbb\x30\x1c\xc3\x5d\x20\x8e\xe2\x7c\x7d\x14\x77\xc1\x38\x86\x6f\xc3\x11\x84\x3a\x6c\x8f\x86\x4d\xb9\x3a\xc2\xa2\x81\x9f\x20\xd1\xc0\x4f\x70\xd8\xc2\x8f\x53\x68\xe0\x27\x18\x34\xf0\x93\x04\xa6\x68\x4b\xad\x2c\xd6\x93\xf4\x11\x0e\x87\x12\x0f\x69\x1c\x4a\x3c\x64\xf2\x40\xe2\x01\x99\x43\x89\x87\x7c\x0e\x25\x9e\xa0\xf4\xd8\x98\x8f\xdc\x1c\xb2\xf0\x1f\xb8\xaf\x27\x11\x2c\xfc\x4a\x54\xb9\xde\xdb\x19\x9b\xc4\xcd\xaf\xa4\x99\x57\x7b\x0e\x5c\x9c\x82\x15\x45\x29\x37\xc0\x9d\x55\xb7\xb7\xac\x9f\x28\x7e\x39\xb8\x89\xc2\xdc\xfe\x5d\xa1\x33\xac\x34\x6d\x97\xc3\xef\x3e\xf1\xcd\x70\xb0\xd3\xb7\x1e\x8d\xfd\xd6\xf0\x67\x27\xdb\x31\x98\xea\x6c\x7f\x59\x84\xc3\x6a\x9b\x24\x7f\xd8\x61\x8f\xb1\xc0\x40\xfa\x80\xc3\xcc\x6d\xfc\x8f\x6e\x4d\x09\xd5\x18\x6f\x7c\xa9\xc3\xf4\x6f\x3c\x09\x90\xbb\x64\x35\x53\x13\x96\x68\xd0\xd3\xed\x40\x34\x7e\x3b\x1c\x47\xd0\x85\xf7\x68\x72\x8c\x0d\xe2\xc9\xf6\xba\xc9\xe0\x24\xdc\x15\xd9\xce\x3d\x8c\xed\xdd\x54\xd8\xce\x0d\x88\xed\xde\x54\xd8\xde\x4d\xa1\xc3\xe0\xf5\xe5\xcd\x55\xe7\xbf\xcf\xfe\x09\x00\x00\xff\xff\xbf\x21\xcf\xcb\x09\x0b\x00\x00")

func migrationsClickhouse2_add_mongoUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsClickhouse2_add_mongoUpSql,
		"migrations/clickhouse/2_add_mongo.up.sql",
	)
}

func migrationsClickhouse2_add_mongoUpSql() (*asset, error) {
	bytes, err := migrationsClickhouse2_add_mongoUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/clickhouse/2_add_mongo.up.sql", size: 2825, mode: os.FileMode(420), modTime: time.Unix(1519919044, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlite1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xc8\x49\x4c\x4a\xcd\x29\x4e\xb0\xe6\x02\x04\x00\x00\xff\xff\xaf\xa8\x3b\x48\x15\x00\x00\x00")

func migrationsSqlite1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlite1_initDownSql,
		"migrations/sqlite/1_init.down.sql",
	)
}

func migrationsSqlite1_initDownSql() (*asset, error) {
	bytes, err := migrationsSqlite1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sqlite/1_init.down.sql", size: 21, mode: os.FileMode(420), modTime: time.Unix(1519912252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlite1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x41\x6b\xea\x40\x14\x05\xe0\x7d\x7e\xc5\x59\x08\x51\x78\xf3\x48\x56\x8f\x67\x71\x11\x75\x5a\x42\x93\x68\xc7\xc9\xc2\x95\x19\x33\xb7\x4d\x60\x92\xc8\x4c\xd4\x2e\xfc\xf1\xa5\xb1\xd4\xb6\x50\x98\xcd\xdc\xc3\x77\x2e\x5c\xc6\x20\xab\xda\xe1\xe8\xc8\x42\xd3\x73\xdd\x92\x86\x51\x7b\x32\xee\xaf\xc7\x18\xe2\x16\x0f\x1d\xca\x4e\x13\xce\x84\x73\x6d\x0c\x94\x71\x1d\x2a\x75\x22\x1c\x2c\x7d\x27\xa0\xd7\x29\x5c\x59\x51\xa3\x70\xb9\x76\x5e\xe0\xc8\x9e\xc8\xee\xaa\xce\xf5\xd8\x2b\x47\xda\xf3\x16\x82\x47\x92\x43\x46\xf3\x84\xa3\xb8\xda\x02\x63\x0f\x1f\x9f\x5d\xad\x0b\xd4\x6d\x4f\x2f\x64\x81\x6c\x25\x91\xe5\x49\x82\xb5\x88\xd3\x48\x6c\xf1\xc8\xb7\x88\x72\xb9\x8a\xb3\x85\xe0\x29\xcf\xa4\xf7\x07\x28\x5a\xd5\x50\x81\x93\xb2\x65\xa5\xec\x38\x0c\x82\xc9\xa7\x1c\x72\x7b\x34\xbf\xe5\x60\x0c\xa3\xe5\x1c\xb3\x19\x7c\xbd\x0f\x7d\xac\x04\x46\xf9\x86\x8b\x61\x62\xbb\xae\xf7\x87\x8a\xd2\x92\xea\x49\x17\xe8\xeb\x86\x5c\xaf\x9a\xc3\xad\x62\xc9\xef\xa3\x3c\x91\x58\xe4\x42\xf0\x4c\xee\x64\x9c\xf2\x8d\x8c\xd2\xf5\x20\x35\x19\xfa\x29\xbf\x2a\x3f\xfc\xff\x2f\x60\x41\xc8\x82\x10\x41\x30\x7d\x7f\xe1\xb0\x33\xcf\xe2\xa7\x9c\x63\x7c\x3b\xcc\xc4\x9b\xdc\x79\x6f\x01\x00\x00\xff\xff\x14\xae\xc3\x79\xb8\x01\x00\x00")

func migrationsSqlite1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlite1_initUpSql,
		"migrations/sqlite/1_init.up.sql",
	)
}

func migrationsSqlite1_initUpSql() (*asset, error) {
	bytes, err := migrationsSqlite1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sqlite/1_init.up.sql", size: 440, mode: os.FileMode(420), modTime: time.Unix(1519912221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/clickhouse/1_add_mysql.down.sql": migrationsClickhouse1_add_mysqlDownSql,
	"migrations/clickhouse/1_add_mysql.up.sql": migrationsClickhouse1_add_mysqlUpSql,
	"migrations/clickhouse/2_add_mongo.down.sql": migrationsClickhouse2_add_mongoDownSql,
	"migrations/clickhouse/2_add_mongo.up.sql": migrationsClickhouse2_add_mongoUpSql,
	"migrations/sqlite/1_init.down.sql": migrationsSqlite1_initDownSql,
	"migrations/sqlite/1_init.up.sql": migrationsSqlite1_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"clickhouse": &bintree{nil, map[string]*bintree{
			"1_add_mysql.down.sql": &bintree{migrationsClickhouse1_add_mysqlDownSql, map[string]*bintree{}},
			"1_add_mysql.up.sql": &bintree{migrationsClickhouse1_add_mysqlUpSql, map[string]*bintree{}},
			"2_add_mongo.down.sql": &bintree{migrationsClickhouse2_add_mongoDownSql, map[string]*bintree{}},
			"2_add_mongo.up.sql": &bintree{migrationsClickhouse2_add_mongoUpSql, map[string]*bintree{}},
		}},
		"sqlite": &bintree{nil, map[string]*bintree{
			"1_init.down.sql": &bintree{migrationsSqlite1_initDownSql, map[string]*bintree{}},
			"1_init.up.sql": &bintree{migrationsSqlite1_initUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

